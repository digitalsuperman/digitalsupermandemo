[{
    "displayName": "allowed-vm-os",
    "description": "need to add description",
    "metadata": {
        "category": "Compute",
        "version": "1.0.0"
    },
    "mode": "All",
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Deny, Audit or Disabled the execution of the Policy"
            },
            "allowedValues": [
                "Deny",
                "Audit",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "in": [
                        "Microsoft.Compute/disks",
                        "Microsoft.Compute/virtualMachines",
                        "Microsoft.Compute/VirtualMachineScaleSets"
                    ]
                },
                {
                    "allOf": [
                        {
                            "not": {
                                "allOf": [
                                    {
                                        "field": "Microsoft.Compute/licenseType",
                                        "notEquals": "Windows_Server"
                                    },
                                    {
                                        "field": "Microsoft.Compute/imagePublisher",
                                        "in": [
                                            "MicrosoftWindowsServer"
                                        ]
                                    },
                                    {
                                        "field": "Microsoft.Compute/imageOffer",
                                        "in": [
                                            "WindowsServer"
                                        ]
                                    },
                                    {
                                        "field": "Microsoft.Compute/imageSku",
                                        "in": [
                                            "2016-Datacenter",
                                            "2016-datacenter-gensecond",
                                            "2016-Datacenter-Server-Core",
                                            "2016-Datacenter-Server-Core-smalldisk",
                                            "2016-Datacenter-smalldisk",
                                            "2016-Datacenter-with-Containers",
                                            "2016-Datacenter-with-RDSH",
                                            "2016-Datacenter-zhcn"
                                        ]
                                    }
                                ]
                            }
                        },
                        {
                            "not": {
                                "allOf": [
                                    {
                                        "field": "Microsoft.Compute/imagePublisher",
                                        "in": [
                                            "RedHat"
                                        ]
                                    },
                                    {
                                        "field": "Microsoft.Compute/imageOffer",
                                        "in": [
                                            "RHEL"
                                        ]
                                    },
                                    {
                                        "field": "Microsoft.Compute/imageSku",
                                        "in": [
                                            "7-LVM",
                                            "7-RAW",
                                            "7-RAW-CI",
                                            "7.2",
                                            "7.3",
                                            "7.3-DAILY",
                                            "7.4",
                                            "7.5",
                                            "7.6",
                                            "7.7"
                                        ]
                                    }
                                ]
                            }
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Allowed virtual machine size SKUs",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "This policy enables you to specify a set of virtual machine size SKUs that your organization can deploy.",
    "metadata": {
        "version": "1.0.1",
        "category": "Compute"
    },
    "parameters": {
        "listOfAllowedSKUs": {
            "type": "Array",
            "metadata": {
                "description": "The list of size SKUs that can be specified for virtual machines.",
                "displayName": "Allowed Size SKUs",
                "strongType": "VMSKUs"
            }
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Compute/virtualMachines"
                },
                {
                    "not": {
                        "field": "Microsoft.Compute/virtualMachines/sku.name",
                        "in": "[parameters('listOfAllowedSKUs')]"
                    }
                }
            ]
        },
        "then": {
            "effect": "Deny"
        }
    }
}, 
{
    "displayName": "Azure Key Vault should have firewall enabled or public network access disabled",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Enable the key vault firewall so that the key vault is not accessible by default to any public IPs or disable public network access for your key vault so that it's not accessible over the public internet. Optionally, you can configure specific IP ranges to limit access to those networks. Learn more at: https://docs.microsoft.com/azure/key-vault/general/network-security and https://aka.ms/akvprivatelink",
    "metadata": {
        "version": "3.3.0",
        "category": "Key Vault"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        },
        "restrictIPAddresses": {
            "type": "String",
            "metadata": {
                "displayName": "Would you like to restrict specific IP addresses?",
                "description": "Select (Yes) to allow or forbid a list of IP addresses. If (No), the list of IP addresses won't have any effect in the policy enforcement"
            },
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "allowedIPAddresses": {
            "type": "Array",
            "metadata": {
                "displayName": "Allowed IP addresses",
                "description": "Array with allowed public IP addresses. An empty array is evaluated as to allow all IPs."
            },
            "defaultValue": []
        },
        "forbiddenIPAddresses": {
            "type": "Array",
            "metadata": {
                "displayName": "Forbidden IP addresses",
                "description": "Array with forbidden public IP addresses. An empty array is evaluated as there are no forbidden IP addresses."
            },
            "defaultValue": []
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.KeyVault/vaults"
                },
                {
                    "field": "Microsoft.KeyVault/vaults/createMode",
                    "notEquals": "recover"
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.KeyVault/vaults/networkAcls.defaultAction",
                            "notEquals": "Deny"
                        },
                        {
                            "allOf": [
                                {
                                    "value": "[parameters('restrictIPAddresses')]",
                                    "equals": "Yes"
                                },
                                {
                                    "anyOf": [
                                        {
                                            "allOf": [
                                                {
                                                    "count": {
                                                        "value": "[parameters('allowedIPAddresses')]",
                                                        "name": "allowedIPAddresses"
                                                    },
                                                    "notEquals": 0
                                                },
                                                {
                                                    "not": {
                                                        "count": {
                                                            "field": "Microsoft.KeyVault/vaults/networkAcls.ipRules[*]",
                                                            "where": {
                                                                "count": {
                                                                    "value": "[parameters('allowedIPAddresses')]",
                                                                    "name": "allowedIpAddress",
                                                                    "where": {
                                                                        "value": "[ipRangeContains(current('allowedIpAddress'), current('Microsoft.KeyVault/vaults/networkAcls.ipRules[*].value'))]",
                                                                        "equals": true
                                                                    }
                                                                },
                                                                "greater": 0
                                                            }
                                                        },
                                                        "equals": "[length(field('Microsoft.KeyVault/vaults/networkAcls.ipRules[*]'))]"
                                                    }
                                                }
                                            ]
                                        },
                                        {
                                            "allOf": [
                                                {
                                                    "count": {
                                                        "value": "[parameters('forbiddenIPAddresses')]",
                                                        "name": "forbiddenIPAddresses"
                                                    },
                                                    "notEquals": 0
                                                },
                                                {
                                                    "not": {
                                                        "count": {
                                                            "field": "Microsoft.KeyVault/vaults/networkAcls.ipRules[*]",
                                                            "where": {
                                                                "count": {
                                                                    "value": "[parameters('forbiddenIPAddresses')]",
                                                                    "name": "forbiddenIPAddresses",
                                                                    "where": {
                                                                        "value": "[ipRangeContains(current('forbiddenIPAddresses'), current('Microsoft.KeyVault/vaults/networkAcls.ipRules[*].value'))]",
                                                                        "equals": true
                                                                    }
                                                                },
                                                                "greater": 0
                                                            }
                                                        },
                                                        "equals": 0
                                                    }
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "anyOf": [
                        {
                            "value": "[requestContext().apiVersion]",
                            "less": "2021-06-01-preview"
                        },
                        {
                            "allOf": [
                                {
                                    "value": "[requestContext().apiVersion]",
                                    "greaterOrEquals": "2021-06-01-preview"
                                },
                                {
                                    "field": "Microsoft.KeyVault/vaults/publicNetworkAccess",
                                    "notEquals": "Disabled"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Azure Key Vault should use RBAC permission model",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Enable RBAC permission model across Key Vaults. Learn more at: https://learn.microsoft.com/en-us/azure/key-vault/general/rbac-migration",
    "metadata": {
        "version": "1.0.1",
        "category": "Key Vault"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.KeyVault/vaults"
                },
                {
                    "not": {
                        "field": "Microsoft.KeyVault/vaults/createMode",
                        "equals": "recover"
                    }
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.KeyVault/vaults/enableRbacAuthorization",
                            "exists": "false"
                        },
                        {
                            "field": "Microsoft.KeyVault/vaults/enableRbacAuthorization",
                            "equals": "false"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Enforce Customer Managed Keys for Function Apps",
    "policyType": "Custom",
    "mode": "Indexed",
    "description": "This policy ensures that Function Apps must use Customer Managed Keys for encryption.",
    "metadata": {
        "version": "1.0.0",
        "category": "Compute"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Effect of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Web/sites"
                },
                {
                    "field": "Microsoft.Web/sites/identity.type",
                    "equals": "SystemAssigned"
                },
                {
                    "field": "Microsoft.Web/sites/config/encryption.keySource",
                    "notEquals": "Microsoft.KeyVault"
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Configure storage accounts to disable public network access",
    "policyType": "BuiltIn",
    "mode": "All",
    "description": "To improve the security of Storage Accounts, ensure that they aren't exposed to the public internet and can only be accessed from a private endpoint. Disable the public network access property as described in https://aka.ms/storageaccountpublicnetworkaccess. This option disables access from any public address space outside the Azure IP range, and denies all logins that match IP or virtual network-based firewall rules. This reduces data leakage risks.",
    "metadata": {
        "version": "1.0.1",
        "category": "Storage"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Modify",
                "Disabled"
            ],
            "defaultValue": "Modify"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Storage/storageAccounts"
                },
                {
                    "field": "Microsoft.Storage/storageAccounts/publicNetworkAccess",
                    "notEquals": "Disabled"
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]",
            "details": {
                "conflictEffect": "audit",
                "roleDefinitionIds": [
                    "/providers/Microsoft.Authorization/roleDefinitions/17d1049b-9a84-46fb-8f53-869881c3d3ab"
                ],
                "operations": [
                    {
                        "operation": "addOrReplace",
                        "field": "Microsoft.Storage/storageAccounts/publicNetworkAccess",
                        "value": "Disabled"
                    }
                ]
            }
        }
    }
},
{
    "displayName": "COMPUTE - Deploy Defender for Servers",
    "description": "Uses a DeployIfNotExists policy to automatically deploy the Defender for Servers",
    "metadata": {
        "category": "Compute",
        "version": "1.0.0"
    },
    "mode": "all",
    "parameters": {
        "AccountLocation": {
            "type": "String",
            "metadata": {
                "description": "Location where the policy should apply"
            }
        },
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "DeployIfNotExists, AuditIfNotExists or Disabled the execution of the Policy"
            },
            "allowedValues": [
                "DeployIfNotExists",
                "AuditIfNotExists",
                "Disabled"
            ],
            "defaultValue": "DeployIfNotExists"
        }
    },
    "policyRule": {
        "if": {
            "field": "type",
            "equals": "Microsoft.Resources/subscriptions"
        },
        "then": {
            "effect": "[parameters('effect')]",
            "details": {
                "type": "Microsoft.Security/pricings",
                "name": "VirtualMachines",
                "deploymentScope": "subscription",
                "existenceScope": "subscription",
                "roleDefinitionIds": [
                    "/providers/Microsoft.Authorization/roleDefinitions/fb1c8493-542b-48eb-b624-b4c8fea62acd"
                ],
                "existenceCondition": {
                    "value": "field(microsoft.security/pricings/pricingTier)",
                    "equals": "Free"
                },
                "deployment": {
                    "location": "[parameters('AccountLocation')]",
                    "properties": {
                        "mode": "incremental",
                        "template": {
                            "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                            "contentVersion": "1.0.0.0",
                            "parameters": {
                                "AccountLocation": {
                                    "type": "string"
                                }
                            },
                            "variables": {},
                            "resources": [
                                {
                                    "type": "Microsoft.Security/pricings",
                                    "apiVersion": "2018-06-01",
                                    "name": "VirtualMachines",
                                    "properties": {
                                        "pricingTier": "standard"
                                    }
                                }
                            ],
                            "outputs": {}
                        },
                        "parameters": {
                            "AccountLocation": {
                                "value": "[parameters('AccountLocation')]"
                            }
                        }
                    }
                }
            }
        }
    }
},
{
    "displayName": "Ensure Blobs Older Than 7 Days Are Set to Cool or Archive Tier",
    "policyType": "Custom",
    "mode": "All",
    "description": "This policy ensures that any blob existing longer than 7 days is moved to Cool or Archive tier.",
    "metadata": {
        "version": "1.0.0",
        "category": "Storage"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Effect of the policy"
            },
            "allowedValues": [
                "Audit",
                "Disabled"
            ],
            "defaultValue": "Audit"
        },
        "daysThreshold": {
            "type": "Integer",
            "metadata": {
                "displayName": "Days Threshold",
                "description": "Number of days after which a blob should be moved to Cool or Archive tier"
            },
            "defaultValue": 7
        },
        "targetTiers": {
            "type": "Array",
            "metadata": {
                "displayName": "Target Tiers",
                "description": "The tiers to which blobs should be moved if they exceed the age threshold."
            },
            "defaultValue": [
                "Cool",
                "Archive"
            ]
        }
    },
    "policyRule": {
        "if": {
            "field": "Microsoft.Storage/storageAccounts/blobServices/default/containers/blobs",
            "exists": "true"
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Key vaults should have deletion protection enabled",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Malicious deletion of a key vault can lead to permanent data loss. You can prevent permanent data loss by enabling purge protection and soft delete. Purge protection protects you from insider attacks by enforcing a mandatory retention period for soft deleted key vaults. No one inside your organization or Microsoft will be able to purge your key vaults during the soft delete retention period. Keep in mind that key vaults created after September 1st 2019 have soft-delete enabled by default.",
    "metadata": {
        "version": "2.1.0",
        "category": "Key Vault"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.KeyVault/vaults"
                },
                {
                    "field": "Microsoft.KeyVault/vaults/createMode",
                    "notEquals": "recover"
                },
                {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "value": "[requestContext().apiVersion]",
                                    "less": "2019-09-01"
                                },
                                {
                                    "anyOf": [
                                        {
                                            "field": "Microsoft.KeyVault/vaults/enableSoftDelete",
                                            "equals": "false"
                                        },
                                        {
                                            "field": "Microsoft.KeyVault/vaults/enableSoftDelete",
                                            "exists": "false"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "value": "[requestContext().apiVersion]",
                                    "greaterOrEquals": "2019-09-01"
                                },
                                {
                                    "field": "Microsoft.KeyVault/vaults/enableSoftDelete",
                                    "equals": "false"
                                }
                            ]
                        },
                        {
                            "field": "Microsoft.KeyVault/vaults/enablePurgeProtection",
                            "exists": "false"
                        },
                        {
                            "field": "Microsoft.KeyVault/vaults/enablePurgeProtection",
                            "equals": "false"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Keys should have the specified maximum validity period",
    "policyType": "BuiltIn",
    "mode": "Microsoft.KeyVault.Data",
    "description": "Manage your organizational compliance requirements by specifying the maximum amount of time in days that a key can be valid within your key vault.",
    "metadata": {
        "version": "1.0.1",
        "category": "Key Vault"
    },
    "parameters": {
        "maximumValidityInDays": {
            "type": "Integer",
            "metadata": {
                "displayName": "The maximum validity period in days",
                "description": "Specify the maximum number of days a key can be valid for. Keys should be ephemeral. Using a key with a long validity period is not recommended."
            }
        },
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "'Audit' allows a non-compliant resource to be created, but flags it as non-compliant. 'Deny' blocks the resource creation. 'Disable' turns off the policy."
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.KeyVault.Data/vaults/keys"
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.KeyVault.Data/vaults/keys/attributes.expiresOn",
                            "exists": false
                        },
                        {
                            "field": "Microsoft.KeyVault.Data/vaults/keys/attributes.expiresOn",
                            "greater": "[addDays(field('Microsoft.KeyVault.Data/vaults/keys/attributes.createdOn'), parameters('maximumValidityInDays'))]"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Configure Azure Application Insights components to disable public network access for log ingestion and querying",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Disable components log ingestion and querying from public networks access to improve security. Only private-link connected networks will be able to ingest and query logs on this workspace. Learn more at https://aka.ms/AzMonPrivateLink#configure-application-insights.",
    "metadata": {
        "version": "1.1.0",
        "category": "Monitoring"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Modify",
                "Disabled"
            ],
            "defaultValue": "Modify"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Insights/components"
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.Insights/components/publicNetworkAccessForIngestion",
                            "notEquals": "Disabled"
                        },
                        {
                            "field": "Microsoft.Insights/components/publicNetworkAccessForQuery",
                            "notEquals": "Disabled"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]",
            "details": {
                "conflictEffect": "Audit",
                "roleDefinitionIds": [
                    "/providers/microsoft.authorization/roleDefinitions/ae349356-3a1b-4a5e-921d-050484c6347e"
                ],
                "operations": [
                    {
                        "operation": "addOrReplace",
                        "field": "Microsoft.Insights/components/publicNetworkAccessForIngestion",
                        "value": "Disabled"
                    },
                    {
                        "operation": "addOrReplace",
                        "field": "Microsoft.Insights/components/publicNetworkAccessForQuery",
                        "value": "Disabled"
                    }
                ]
            }
        }
    }
},
{
    "displayName": "Restrict LRS Storage Accounts in Development Subscriptions",
    "policyType": "Custom",
    "mode": "Indexed",
    "description": "This policy prevents the use of Locally Redundant Storage (LRS) for storage accounts in development subscriptions.",
    "metadata": {
        "version": "1.0.0",
        "category": "Storage"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Effect of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        },
        "developmentSubscriptionIds": {
            "type": "Array",
            "metadata": {
                "displayName": "Development Subscriptions",
                "description": "List of subscription IDs considered as development"
            }
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Storage/storageAccounts"
                },
                {
                    "field": "subscriptionId",
                    "in": "[parameters('developmentSubscriptionIds')]"
                },
                {
                    "field": "Microsoft.Storage/storageAccounts/sku.name",
                    "equals": "Standard_LRS"
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Storage Account - Customer Managed Keys Blob and File Storage DENY",
    "description": "This Azure Policy denies the deployment of an Azure Storage Account when the 'Encryption type' setting is not set to 'Customer-managed keys'.",
    "metadata": {
        "version": "1.0.0",
        "category": "Storage"
    },
    "mode": "All",
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Deny, Audit or Disabled the execution of the Policy"
            },
            "allowedValues": [
                "Deny",
                "Audit",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Storage/storageAccounts"
                },
                {
                    "not": {
                        "field": "Microsoft.Storage/storageAccounts/encryption.keySource",
                        "equals": "Microsoft.Keyvault"
                    }
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Storage accounts should be limited by allowed SKUs",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Restrict the set of storage account SKUs that your organization can deploy.",
    "metadata": {
        "version": "1.1.0",
        "category": "Storage"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the audit policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Deny"
        },
        "listOfAllowedSKUs": {
            "type": "Array",
            "metadata": {
                "description": "The list of SKUs that can be specified for storage accounts.",
                "displayName": "Allowed SKUs",
                "strongType": "StorageSKUs"
            },
            "defaultValue": [
                "Standard_GRS",
                "Standard_RAGRS",
                "Standard_GZRS",
                "Premium_RAGZRS",
                "Standard_GZRS",
                "Standard_RAGZRS",
                "Standard_ZRS",
                "Premium_ZRS",
                "Premium_LRS"
            ]
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Storage/storageAccounts"
                },
                {
                    "not": {
                        "field": "Microsoft.Storage/storageAccounts/sku.name",
                        "in": "[parameters('listOfAllowedSKUs')]"
                    }
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Restrict Certain SKUs and LRS for Storage Accounts in Development Subscriptions",
    "policyType": "Custom",
    "mode": "Indexed",
    "description": "This policy prevents the use of specified SKUs for storage accounts in development subscriptions.",
    "metadata": {
        "version": "1.1.0",
        "category": "Storage"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Effect of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        },
        "developmentSubscriptionIds": {
            "type": "Array",
            "metadata": {
                "displayName": "Development Subscriptions",
                "description": "List of subscription IDs considered as development"
            }
        },
        "listOfNotAllowedSKUs": {
            "type": "Array",
            "metadata": {
                "displayName": "Disallowed SKUs",
                "description": "The list of SKUs that cannot be specified for storage accounts in development subscriptions.",
                "strongType": "StorageSKUs"
            },
            "defaultValue": [
                "Standard_LRS",
                "Premium_LRS"
            ]
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Storage/storageAccounts"
                },
                {
                    "field": "subscriptionId",
                    "in": "[parameters('developmentSubscriptionIds')]"
                },
                {
                    "field": "Microsoft.Storage/storageAccounts/sku.name",
                    "in": "[parameters('listOfNotAllowedSKUs')]"
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Azure Key Vault should use RBAC permission model",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Enable RBAC permission model across Key Vaults. Learn more at: https://learn.microsoft.com/en-us/azure/key-vault/general/rbac-migration",
    "metadata": {
        "version": "1.0.1",
        "category": "Key Vault"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "Audit",
                "Deny",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.KeyVault/vaults"
                },
                {
                    "not": {
                        "field": "Microsoft.KeyVault/vaults/createMode",
                        "equals": "recover"
                    }
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.KeyVault/vaults/enableRbacAuthorization",
                            "exists": "false"
                        },
                        {
                            "field": "Microsoft.KeyVault/vaults/enableRbacAuthorization",
                            "equals": "false"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "properties": {
      "displayName": "Ensure VMs in Dev Environment Do Not Use SSDs or Premium SSDs",
      "policyType": "Custom",
      "mode": "All",
      "description": "This policy ensures that virtual machines in the development environment do not use SSDs or Premium SSDs for their OS or data disks.",
      "parameters": {},
      "policyRule": {
        "if": {
          "allOf": [
            {
              "field": "tags.environment",
              "equals": "development"
            },
            {
              "anyOf": [
                {
                  "field": "Microsoft.Compute/disks.sku.name",
                  "equals": "Premium_LRS"
                },
                {
                  "field": "Microsoft.Compute/disks.sku.name",
                  "equals": "StandardSSD_LRS"
                }
              ]
            }
          ]
        },
        "then": {
          "effect": "deny"
        }
      }
    }
  },
  {
    "displayName": "Allowed locations for resource groups",
    "policyType": "BuiltIn",
    "mode": "All",
    "description": "This policy enables you to restrict the locations your organization can create resource groups in. Use to enforce your geo-compliance requirements.",
    "metadata": {
        "version": "1.0.0",
        "category": "General"
    },
    "parameters": {
        "listOfAllowedLocations": {
            "type": "Array",
            "metadata": {
                "description": "The list of locations that resource groups can be created in.",
                "strongType": "location",
                "displayName": "Allowed locations"
            }
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.Resources/subscriptions/resourceGroups"
                },
                {
                    "field": "location",
                    "notIn": "[parameters('listOfAllowedLocations')]"
                }
            ]
        },
        "then": {
            "effect": "deny"
        }
    }
},
{
    "displayName": "Log Analytics workspaces should block log ingestion and querying from public networks",
    "policyType": "BuiltIn",
    "mode": "Indexed",
    "description": "Improve workspace security by blocking log ingestion and querying from public networks. Only private-link connected networks will be able to ingest and query logs on this workspace. Learn more at https://aka.ms/AzMonPrivateLink#configure-log-analytics.",
    "metadata": {
        "version": "1.1.0",
        "category": "Monitoring"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "The effect determines what happens when the policy rule is evaluated to match"
            },
            "allowedValues": [
                "audit",
                "Audit",
                "deny",
                "Deny",
                "disabled",
                "Disabled"
            ],
            "defaultValue": "Audit"
        }
    },
    "policyRule": {
        "if": {
            "allOf": [
                {
                    "field": "type",
                    "equals": "Microsoft.OperationalInsights/workspaces"
                },
                {
                    "anyOf": [
                        {
                            "field": "Microsoft.OperationalInsights/workspaces/publicNetworkAccessForIngestion",
                            "notEquals": "disabled"
                        },
                        {
                            "field": "Microsoft.OperationalInsights/workspaces/publicNetworkAccessForQuery",
                            "notEquals": "disabled"
                        }
                    ]
                }
            ]
        },
        "then": {
            "effect": "[parameters('effect')]"
        }
    }
},
{
    "displayName": "Activity log should be retained for at least one year",
    "policyType": "BuiltIn",
    "mode": "All",
    "description": "This policy audits the activity log if the retention is not set for 365 days or forever (retention days set to 0).",
    "metadata": {
        "version": "1.0.0",
        "category": "Monitoring"
    },
    "parameters": {
        "effect": {
            "type": "String",
            "metadata": {
                "displayName": "Effect",
                "description": "Enable or disable the execution of the policy"
            },
            "allowedValues": [
                "AuditIfNotExists",
                "Disabled"
            ],
            "defaultValue": "AuditIfNotExists"
        }
    },
    "policyRule": {
        "if": {
            "field": "type",
            "equals": "Microsoft.Resources/subscriptions"
        },
        "then": {
            "effect": "[parameters('effect')]",
            "details": {
                "type": "Microsoft.Insights/logProfiles",
                "existenceCondition": {
                    "anyOf": [
                        {
                            "allOf": [
                                {
                                    "field": "Microsoft.Insights/logProfiles/retentionPolicy.enabled",
                                    "equals": "true"
                                },
                                {
                                    "field": "Microsoft.Insights/logProfiles/retentionPolicy.days",
                                    "equals": "90"
                                }
                            ]
                        },
                        {
                            "allOf": [
                                {
                                    "field": "Microsoft.Insights/logProfiles/retentionPolicy.enabled",
                                    "equals": "false"
                                },
                                {
                                    "field": "Microsoft.Insights/logProfiles/retentionPolicy.days",
                                    "equals": "0"
                                }
                            ]
                        }
                    ]
                }
            }
        }
    }
}
]